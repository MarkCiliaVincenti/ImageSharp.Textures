<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ output extension=".ignore" #>
<#@ include file="MultipleOutputHelper.ttinclude" #>
<#@ include file="Helper.ttinclude" #>
<# 

    var manager = Manager.Create(Host, GenerationEnvironment); 

    var pixelInfos = new[] {
    
        new PixelInfo
        {
            Name = "Bgr32x",
            PackedType = "uint",
            IsFloat = false,
            ChannelInfos = new[] {
                new ChannelInfo { Bits = 8, Channel = "b" },
                new ChannelInfo { Bits = 8, Channel = "g" },
                new ChannelInfo { Bits = 8, Channel = "r" }
            }
        },

        new PixelInfo
        {
            Name = "Rgb32x",
            PackedType = "uint",
            IsFloat = false,
            ChannelInfos = new[] {
                new ChannelInfo { Bits = 8, Channel = "r" },
                new ChannelInfo { Bits = 8, Channel = "g" },
                new ChannelInfo { Bits = 8, Channel = "b" }
            }
        },

        new PixelInfo
        {
            Name = "R8g8b8x",
            PackedType = "none",
            IsFloat = false,
            ChannelInfos = new[] {
                new ChannelInfo { Bits = 8, Channel = "r" },
                new ChannelInfo { Bits = 8, Channel = "g" },
                new ChannelInfo { Bits = 8, Channel = "b" }
            }
        },

        new PixelInfo
        {
            Name = "R11G11B10_Float",
            PackedType = "uint",
            IsFloat = true,
            ChannelInfos = new[] {
                new ChannelInfo { Bits = 11, Channel = "r" },
                new ChannelInfo { Bits = 11, Channel = "g" },
                new ChannelInfo { Bits = 10, Channel = "b" }
            }
        }

    };

    foreach (var pixelInfo in pixelInfos) {
    
        manager.StartNewFile($"{pixelInfo.Name}.cs");
    
#>// Copyright (c) Six Labors and contributors.
// Licensed under the Apache License, Version 2.0.

<#= Helper.GenerateUsings(pixelInfo) #>

namespace SixLabors.ImageSharp.Textures.PixelFormats
{
    <#= Helper.GenerateSummary(pixelInfo, 4) #>
    <#= Helper.GenerateStructHeader(pixelInfo, 4) #>
    {
        <#= Helper.GeneratePixelChannels(pixelInfo, 8) #><#= Helper.GenerateConstructors(pixelInfo, 8) #>

        /// <summary>
        /// Compares two <see cref="<#= pixelInfo.Name #>"/> objects for equality.
        /// </summary>
        /// <param name="left">The <see cref="<#= pixelInfo.Name #>"/> on the left side of the operand.</param>
        /// <returns>
        /// True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.
        /// </returns>
        /// <param name="right">The <see cref="<#= pixelInfo.Name #>"/> on the right side of the operand.</param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(<#= pixelInfo.Name #> left, <#= pixelInfo.Name #> right) => left.Equals(right);

        /// <summary>
        /// Compares two <see cref="<#= pixelInfo.Name #>"/> objects for equality.
        /// </summary>
        /// <param name="left">The <see cref="<#= pixelInfo.Name #>"/> on the left side of the operand.</param>
        /// <param name="right">The <see cref="<#= pixelInfo.Name #>"/> on the right side of the operand.</param>
        /// <returns>
        /// True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.
        /// </returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(<#= pixelInfo.Name #> left, <#= pixelInfo.Name #> right) => !left.Equals(right);

        /// <inheritdoc />
        public PixelOperations<<#= pixelInfo.Name #>> CreatePixelOperations() => new PixelOperations<<#= pixelInfo.Name #>>();

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromScaledVector4(Vector4 vector) => this.FromVector4(vector);

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public Vector4 ToScaledVector4() => this.ToVector4();

        <#= Helper.GenertateFromVector4(pixelInfo, 8) #>

        <#= Helper.GenertateToVector4(pixelInfo, 8) #>

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromBgra5551(Bgra5551 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromArgb32(Argb32 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromBgr24(Bgr24 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromBgra32(Bgra32 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromL8(L8 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromL16(L16 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromLa16(La16 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromLa32(La32 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromRgb24(Rgb24 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromRgba32(Rgba32 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc />
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void ToRgba32(ref Rgba32 dest)
        {
            dest.FromScaledVector4(this.ToScaledVector4());
        }

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromRgb48(Rgb48 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc/>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void FromRgba64(Rgba64 source) => this.FromScaledVector4(source.ToScaledVector4());

        /// <inheritdoc />
        public override bool Equals(object obj) => obj is <#= pixelInfo.Name #> other && this.Equals(other);

        <#= Helper.GenerateEquals(pixelInfo, 8) #>

        <#= Helper.GenerateToString(pixelInfo, 8) #>

        <#= Helper.GenerateHashCode(pixelInfo, 8) #><#= Helper.GeneratePack(pixelInfo, 8) #>
    }
}
<# 
        manager.EndBlock();
    }

     manager.Process(true); 
#>
<#+
private
#>